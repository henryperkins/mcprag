name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20'

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check deployment conditions
        id: check
        run: |
          # Check if this is a direct push to main or manual trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  test-and-build:
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm run test:coverage
      
      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 7

  deploy-worker:
    needs: test-and-build
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: dist/
      
      - name: Deploy to Cloudflare Workers
        id: deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            npm run deploy -- --env staging
            echo "url=https://staging.fancy-leaf-b943.workers.dev" >> $GITHUB_OUTPUT
          else
            npm run deploy:prod
            echo "url=https://fancy-leaf-b943.workers.dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Run smoke tests
        run: |
          sleep 10  # Wait for deployment to propagate
          curl -f ${{ steps.deploy.outputs.url }}/api/health || exit 1

  deploy-pages:
    needs: test-and-build
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}-pages
      url: ${{ steps.deploy-pages.outputs.url }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: dist/
      
      - name: Deploy to Cloudflare Pages
        id: deploy-pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: fancy-leaf-b943
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          wranglerVersion: '3'
          deploymentName: ${{ github.event.inputs.environment || 'production' }}

  migrate-database:
    needs: [deploy-worker]
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}-db
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run D1 migrations
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          npm run d1:migrate:remote

  notify:
    needs: [deploy-worker, deploy-pages, migrate-database]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const environment = '${{ github.event.inputs.environment || 'production' }}';
            const workerUrl = '${{ needs.deploy-worker.outputs.url }}';
            const status = '${{ job.status }}';
            
            const message = status === 'success' 
              ? `✅ Successfully deployed to ${environment}\n\nWorker URL: ${workerUrl}`
              : `❌ Deployment to ${environment} failed`;
            
            // Create deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 1,
              state: status === 'success' ? 'success' : 'failure',
              environment_url: workerUrl,
              description: message
            });
            
            // Post to Slack/Discord webhook if configured
            if ('${{ secrets.WEBHOOK_URL }}') {
              await fetch('${{ secrets.WEBHOOK_URL }}', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  text: message,
                  username: 'GitHub Actions',
                  icon_emoji: status === 'success' ? ':rocket:' : ':x:'
                })
              });
            }

  rollback:
    needs: [deploy-worker, deploy-pages]
    runs-on: ubuntu-latest
    if: failure()
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}-rollback
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.before }}  # Checkout previous commit
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build previous version
        run: npm run build
      
      - name: Rollback Cloudflare Workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "Rolling back to previous version..."
          npm run deploy:prod
      
      - name: Notify rollback
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue?.number || 1,
              body: '⚠️ Deployment failed and was automatically rolled back to the previous version.'
            });