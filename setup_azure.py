#!/usr/bin/env python3
"""
Azure setup script for MCP RAG system
"""
import subprocess
import json
import os
import sys
from pathlib import Path

def run_command(cmd, capture_output=True):
    """Run a shell command and return the result."""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=capture_output, text=True)
        if result.returncode != 0:
            print(f"Error running command: {cmd}")
            print(f"Error: {result.stderr}")
            return None
        return result.stdout.strip() if capture_output else True
    except Exception as e:
        print(f"Exception running command: {cmd}")
        print(f"Exception: {e}")
        return None

def check_azure_cli():
    """Check if Azure CLI is installed and user is logged in."""
    print("üîç Checking Azure CLI...")
    
    # Check if az command exists
    if not run_command("az --version"):
        print("‚ùå Azure CLI not found. Please install it first.")
        print("   Visit: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli")
        return False
    
    # Check if logged in
    account_info = run_command("az account show")
    if not account_info:
        print("‚ùå Not logged into Azure. Please run: az login")
        return False
    
    account = json.loads(account_info)
    print(f"‚úÖ Logged in as: {account['user']['name']}")
    print(f"‚úÖ Subscription: {account['name']}")
    return True

def create_resource_group(name="mcprag-rg", location="eastus"):
    """Create Azure resource group."""
    print(f"üèóÔ∏è  Creating resource group: {name}")
    
    cmd = f"az group create --name {name} --location {location}"
    result = run_command(cmd)
    
    if result:
        print(f"‚úÖ Resource group '{name}' created successfully")
        return True
    else:
        print(f"‚ùå Failed to create resource group '{name}'")
        return False

def create_search_service(service_name="mcprag-search", resource_group="mcprag-rg", location="eastus"):
    """Create Azure Cognitive Search service."""
    print(f"üîç Creating Azure Cognitive Search service: {service_name}")
    
    cmd = f"""az search service create \
        --name {service_name} \
        --resource-group {resource_group} \
        --sku basic \
        --location {location}"""
    
    result = run_command(cmd)
    
    if result:
        print(f"‚úÖ Search service '{service_name}' created successfully")
        return True
    else:
        print(f"‚ùå Failed to create search service '{service_name}'")
        return False

def get_admin_key(service_name="mcprag-search", resource_group="mcprag-rg"):
    """Get admin key for the search service."""
    print(f"üîë Getting admin key for: {service_name}")
    
    cmd = f"az search admin-key show --service-name {service_name} --resource-group {resource_group}"
    result = run_command(cmd)
    
    if result:
        keys = json.loads(result)
        admin_key = keys['primaryKey']
        print(f"‚úÖ Admin key retrieved")
        return admin_key
    else:
        print(f"‚ùå Failed to get admin key")
        return None

def create_env_file(endpoint, admin_key):
    """Create .env file with Azure configuration."""
    print("üìù Creating .env file...")
    
    env_content = f"""# Azure Cognitive Search Configuration
ACS_ENDPOINT={endpoint}
ACS_ADMIN_KEY={admin_key}

# Generated by setup_azure.py
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ .env file created successfully")

def main():
    """Main setup function."""
    print("üöÄ Setting up Azure Cognitive Search for MCP RAG")
    print("=" * 50)
    
    # Configuration
    resource_group = "mcprag-rg"
    service_name = "mcprag-search"
    location = "eastus"
    
    # Check prerequisites
    if not check_azure_cli():
        sys.exit(1)
    
    # Create resources
    if not create_resource_group(resource_group, location):
        sys.exit(1)
    
    if not create_search_service(service_name, resource_group, location):
        sys.exit(1)
    
    # Get credentials
    admin_key = get_admin_key(service_name, resource_group)
    if not admin_key:
        sys.exit(1)
    
    # Create configuration
    endpoint = f"https://{service_name}.search.windows.net"
    create_env_file(endpoint, admin_key)
    
    print("\nüéâ Setup completed successfully!")
    print("\nNext steps:")
    print("1. Run: python create_index.py")
    print("2. Run: python indexer.py")
    print("3. Run: python mcp_server.py")
    print("\nEstimated monthly cost: ~$250")

if __name__ == "__main__":
    main()
