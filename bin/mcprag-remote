#!/bin/bash
#
# mcprag-remote - CLI wrapper for remote mcprag server
#
# Usage:
#   mcprag-remote auth <email>      - Authenticate with email
#   mcprag-remote search <query>    - Search code
#   mcprag-remote tool <name> <json> - Execute tool
#   mcprag-remote list              - List available tools
#   mcprag-remote health            - Check server health

# Configuration
MCPRAG_CONFIG="${HOME}/.mcprag/config.json"
MCPRAG_SERVER="${MCPRAG_SERVER:-http://localhost:8001}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Ensure config directory exists
mkdir -p "$(dirname "$MCPRAG_CONFIG")"

# Function: Print error
error() {
    echo -e "${RED}Error: $1${NC}" >&2
}

# Function: Print success
success() {
    echo -e "${GREEN}$1${NC}"
}

# Function: Print info
info() {
    echo -e "${YELLOW}$1${NC}"
}

# Function: Authenticate
auth() {
    local email="$1"
    
    if [ -z "$email" ]; then
        error "Email address required"
        echo "Usage: mcprag-remote auth <email>"
        exit 1
    fi
    
    info "Sending magic link to ${email}..."
    
    response=$(curl -s -X POST "${MCPRAG_SERVER}/auth/login" \
        -H "Content-Type: application/json" \
        -d "{\"email\":\"${email}\"}")
    
    if echo "$response" | grep -q "error"; then
        error "Failed to send magic link"
        echo "$response" | jq .
        exit 1
    fi
    
    success "Magic link sent! Check your email."
    echo "Enter the token from the authentication link:"
    read -r token
    
    # Complete authentication
    auth_response=$(curl -s "${MCPRAG_SERVER}/auth/callback?token=${token}")
    
    if echo "$auth_response" | grep -q "error"; then
        error "Authentication failed"
        echo "$auth_response" | jq .
        exit 1
    fi
    
    # Extract session token
    session_token=$(echo "$auth_response" | jq -r '.token')
    user_email=$(echo "$auth_response" | jq -r '.email')
    user_tier=$(echo "$auth_response" | jq -r '.tier')
    
    # Save to config
    cat > "$MCPRAG_CONFIG" <<EOF
{
  "token": "${session_token}",
  "server": "${MCPRAG_SERVER}",
  "email": "${user_email}",
  "tier": "${user_tier}"
}
EOF
    
    success "Authentication successful!"
    echo "Logged in as: ${user_email} (tier: ${user_tier})"
}

# Function: Load token from config
load_token() {
    if [ ! -f "$MCPRAG_CONFIG" ]; then
        error "Not authenticated. Run: mcprag-remote auth <email>"
        exit 1
    fi
    
    TOKEN=$(jq -r '.token' "$MCPRAG_CONFIG" 2>/dev/null)
    
    if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
        error "Invalid configuration. Please re-authenticate."
        exit 1
    fi
}

# Function: Execute tool
tool() {
    local tool_name="$1"
    local params="$2"
    
    if [ -z "$tool_name" ]; then
        error "Tool name required"
        echo "Usage: mcprag-remote tool <name> <json_params>"
        exit 1
    fi
    
    # Load token
    load_token
    
    # Default to empty object if no params
    if [ -z "$params" ]; then
        params="{}"
    fi
    
    # Execute tool
    response=$(curl -s -X POST "${MCPRAG_SERVER}/mcp/tool/${tool_name}" \
        -H "Authorization: Bearer ${TOKEN}" \
        -H "Content-Type: application/json" \
        -d "${params}")
    
    # Check for errors
    if echo "$response" | grep -q "\"detail\""; then
        error "Tool execution failed"
        echo "$response" | jq .
        exit 1
    fi
    
    # Pretty print response
    echo "$response" | jq .
}

# Function: Search shortcut
search() {
    local query="$1"
    local max_results="${2:-10}"
    
    if [ -z "$query" ]; then
        error "Search query required"
        echo "Usage: mcprag-remote search <query> [max_results]"
        exit 1
    fi
    
    info "Searching for: ${query}"
    
    tool "search_code" "{\"query\":\"${query}\",\"max_results\":${max_results}}"
}

# Function: List tools
list_tools() {
    load_token
    
    info "Fetching available tools..."
    
    response=$(curl -s -X GET "${MCPRAG_SERVER}/mcp/tools" \
        -H "Authorization: Bearer ${TOKEN}")
    
    if echo "$response" | grep -q "\"detail\""; then
        error "Failed to list tools"
        echo "$response" | jq .
        exit 1
    fi
    
    # Display tools
    echo "$response" | jq -r '.tools[] | "  - \(.name) (tier: \(.tier))"'
    
    total=$(echo "$response" | jq -r '.total')
    user_tier=$(echo "$response" | jq -r '.user_tier')
    
    echo ""
    success "Total tools available: ${total}"
    info "Your tier: ${user_tier}"
}

# Function: Health check
health_check() {
    info "Checking server health..."
    
    response=$(curl -s "${MCPRAG_SERVER}/health")
    
    if [ $? -ne 0 ]; then
        error "Server is not responding"
        exit 1
    fi
    
    status=$(echo "$response" | jq -r '.status')
    
    if [ "$status" = "healthy" ]; then
        success "Server is healthy"
    else
        error "Server is unhealthy"
    fi
    
    echo "$response" | jq .
}

# Function: Show current session
whoami() {
    if [ ! -f "$MCPRAG_CONFIG" ]; then
        error "Not authenticated"
        exit 1
    fi
    
    email=$(jq -r '.email' "$MCPRAG_CONFIG" 2>/dev/null)
    tier=$(jq -r '.tier' "$MCPRAG_CONFIG" 2>/dev/null)
    server=$(jq -r '.server' "$MCPRAG_CONFIG" 2>/dev/null)
    
    if [ -z "$email" ] || [ "$email" = "null" ]; then
        info "Authenticated but user info not cached"
    else
        success "Current user: ${email} (tier: ${tier})"
    fi
    
    info "Server: ${server}"
}

# Function: Logout
logout() {
    if [ -f "$MCPRAG_CONFIG" ]; then
        rm "$MCPRAG_CONFIG"
        success "Logged out successfully"
    else
        info "Not logged in"
    fi
}

# Function: Show help
show_help() {
    cat <<EOF
mcprag-remote - CLI for remote mcprag server

Usage:
  mcprag-remote <command> [arguments]

Commands:
  auth <email>           Authenticate with email
  search <query> [n]     Search code (n = max results, default 10)
  tool <name> <json>     Execute tool with JSON parameters
  list                   List available tools
  health                 Check server health
  whoami                 Show current session
  logout                 Remove saved session
  help                   Show this help message

Environment Variables:
  MCPRAG_SERVER          Server URL (default: http://localhost:8001)

Examples:
  mcprag-remote auth user@example.com
  mcprag-remote search "authentication middleware"
  mcprag-remote tool generate_code '{"description":"REST API client"}'
  mcprag-remote list

Configuration:
  Session is saved in: ~/.mcprag/config.json
EOF
}

# Main command dispatcher
case "$1" in
    auth)
        auth "$2"
        ;;
    tool)
        tool "$2" "$3"
        ;;
    search)
        search "$2" "$3"
        ;;
    list)
        list_tools
        ;;
    health)
        health_check
        ;;
    whoami)
        whoami
        ;;
    logout)
        logout
        ;;
    help|--help|-h)
        show_help
        ;;
    "")
        error "No command specified"
        show_help
        exit 1
        ;;
    *)
        error "Unknown command: $1"
        show_help
        exit 1
        ;;
esac